{
  "comment": "Claude Code Hook Configuration Examples",
  "comment_usage": "Copy desired hooks to .claude/settings.local.json under 'hooks' key",
  "comment_warning": "Hooks run on every event - keep commands fast (<60s timeout)",
  "comment_docs": "See: https://docs.claude.com/en/docs/claude-code/hooks",

  "hooks": {
    "SessionStart": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "cd tools && uv run ce context health --json | jq -r 'if .drift_score > 30 then \"‚ö†Ô∏è HIGH DRIFT: \" + (.drift_score | tostring) + \"% - Run: ce context sync\" elif .drift_score > 10 then \"‚ö†Ô∏è Moderate drift: \" + (.drift_score | tostring) + \"%\" else \"‚úÖ Context healthy: \" + (.drift_score | tostring) + \"%\" end'",
            "timeout": 5
          }
        ]
      }
    ],

    "UserPromptSubmit": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "cd tools && uv run ce context auto-sync --status --quiet | grep -q 'disabled' && echo 'üí° TIP: Enable auto-sync: ce context auto-sync --enable' || true",
            "timeout": 2
          }
        ]
      }
    ],

    "PostToolUse": [
      {
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "cd tools && uv run ce context health --json | jq -r 'if .drift_score > 40 then \"üö® CRITICAL DRIFT: \" + (.drift_score | tostring) + \"% - STOP AND SYNC\" else \"\" end' | grep -v '^$'",
            "timeout": 5
          }
        ]
      }
    ]
  },

  "hook_examples": {
    "session_start_health_check": {
      "event": "SessionStart",
      "matcher": "*",
      "command": "cd tools && uv run ce context health --json | jq -r 'if .drift_score > 30 then \"‚ö†Ô∏è HIGH DRIFT: \" + (.drift_score | tostring) + \"% - Run: ce context sync\" elif .drift_score > 10 then \"‚ö†Ô∏è Moderate drift: \" + (.drift_score | tostring) + \"%\" else \"‚úÖ Context healthy: \" + (.drift_score | tostring) + \"%\" end'",
      "timeout": 5,
      "description": "Check context health when session starts (drift warning)",
      "performance": "~300ms",
      "recommended_for": "Daily development, PRP work"
    },

    "auto_sync_reminder": {
      "event": "UserPromptSubmit",
      "matcher": "*",
      "command": "cd tools && uv run ce context auto-sync --status --quiet | grep -q 'disabled' && echo 'üí° TIP: Enable auto-sync: ce context auto-sync --enable' || true",
      "timeout": 2,
      "description": "Remind if auto-sync disabled on user prompt",
      "performance": "~100ms",
      "recommended_for": "Users who forget to enable auto-sync",
      "note": "Only shows if auto-sync is disabled"
    },

    "drift_spike_detector": {
      "event": "PostToolUse",
      "matcher": "Edit|Write",
      "command": "cd tools && uv run ce context health --json | jq -r 'if .drift_score > 40 then \"üö® CRITICAL DRIFT: \" + (.drift_score | tostring) + \"% - STOP AND SYNC\" else \"\" end' | grep -v '^$'",
      "timeout": 5,
      "description": "Alert on critical drift after file edits",
      "performance": "~300ms per edit",
      "recommended_for": "Long sessions with many file changes",
      "warning": "Runs after Edit/Write tools only (not all tools)"
    },

    "simple_health_check": {
      "event": "SessionStart",
      "matcher": "*",
      "command": "cd tools && uv run ce context health --quiet || echo '‚ö†Ô∏è Context unhealthy - run: ce context sync'",
      "timeout": 3,
      "description": "Simple pass/fail health check (fastest)",
      "performance": "~150ms",
      "recommended_for": "Performance-sensitive setups"
    }
  },

  "available_events": {
    "SessionStart": "Fires when a new Claude Code session starts",
    "SessionEnd": "Fires when a Claude Code session ends",
    "UserPromptSubmit": "Fires after user submits a prompt",
    "PreToolUse": "Fires before a tool is executed",
    "PostToolUse": "Fires after a tool is executed",
    "PreCompact": "Fires before conversation context is compacted",
    "Stop": "Fires when user stops generation",
    "SubagentStop": "Fires when a subagent stops",
    "Notification": "Fires on notification events"
  },

  "matcher_patterns": {
    "exact": "\"Bash\" - Match exact tool name",
    "regex": "\"Edit|Write\" - Match multiple tools with regex",
    "wildcard": "\"*\" - Match all tools/events",
    "negation": "\"!Bash\" - Match everything except Bash (not standard, use regex)"
  },

  "installation_instructions": {
    "step_1": "Choose a hook example from 'hook_examples' section",
    "step_2": "Copy to .claude/settings.local.json under 'hooks' key",
    "step_3": "Use correct event name (SessionStart, UserPromptSubmit, PostToolUse)",
    "step_4": "Set matcher and command in nested structure",
    "step_5": "Restart Claude Code or reload settings",
    "step_6": "Test with: echo test message in conversation",
    "note": "Hooks run in project directory automatically"
  },

  "example_settings_integration": {
    "comment": "Copy this structure to .claude/settings.local.json",
    "hooks": {
      "SessionStart": [
        {
          "matcher": "*",
          "hooks": [
            {
              "type": "command",
              "command": "cd tools && uv run ce context health --quiet || echo '‚ö†Ô∏è Context drift detected'",
              "timeout": 5
            }
          ]
        }
      ]
    }
  },

  "performance_notes": {
    "timeout_default": "60 seconds (override with 'timeout' field)",
    "timeout_recommended": "2-5 seconds for interactive hooks",
    "blocking_behavior": "Hooks block user interaction until complete",
    "optimization": "Use --quiet, --json, and grep for speed",
    "caching": "Consider caching health checks for 5-10 minutes",
    "deduplication": "Identical commands automatically deduplicated"
  },

  "troubleshooting": {
    "hook_not_firing": [
      "Check .claude/settings.local.json syntax (valid JSON)",
      "Verify hook structure: event ‚Üí matcher ‚Üí hooks array ‚Üí type/command",
      "Check command runs successfully in terminal (from project root)",
      "Restart Claude Code",
      "Check matcher pattern matches tool name"
    ],
    "slow_hooks": [
      "Add --quiet flag to ce commands",
      "Use grep/jq to filter output",
      "Set shorter timeout (2-5s instead of 60s)",
      "Consider --json for structured parsing",
      "Cache results with timestamp check"
    ],
    "noisy_hooks": [
      "Use grep -v '^$' to filter empty output",
      "Add || true to prevent non-zero exit codes",
      "Use specific matchers (Edit|Write) instead of * for PostToolUse",
      "Add conditional output (only show if condition met)"
    ],
    "timeout_errors": [
      "Reduce timeout from 60s to 5s for fast commands",
      "Optimize command with --quiet and --json flags",
      "Split long-running checks into separate manual commands",
      "Use background jobs with timeout monitoring"
    ]
  }
}
